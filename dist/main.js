(()=>{"use strict";let e=[];function t(t){const o=n(t);m(e[o])}function n(t){return e.findIndex((e=>e.title===t))}let o=[];function c(){const e=d(o);-1!=e&&i(o[e].desc)}function d(e,t){const n=document.querySelector(".main-hd");return void 0===t?e.findIndex((e=>e.title===n.textContent)):e.findIndex((e=>e.title===t))}function l(e,t){return document.querySelector(".main-hd"),e.findIndex((e=>e===t))}function r(e){document.querySelector(".main-hd-con").style.paddingBottom="1rem";const t=document.querySelector(".project-list");t.textContent="";for(let n=0;n<e.length;n++)t.appendChild(s(e[n]))}function s(e){const t=document.createElement("div");t.classList.add("new-project-con");const n=document.createElement("p");return n.classList.add("project-title"),n.textContent=e.title,t.appendChild(n),t.appendChild(function(){const e=document.createElement("div");e.classList.add("project-btn");const t=document.createElement("span");t.classList.add("material-icons-outlined"),t.classList.add("edit"),t.textContent="edit",e.appendChild(t);const n=document.createElement("span");return n.classList.add("material-icons-outlined"),n.classList.add("delete"),n.textContent="delete",e.appendChild(n),e}()),t}function i(e){const t=document.querySelector(".project-task-list");if(void 0===e)t.textContent="";else{t.textContent="";for(let n=0;n<e.length;n++)console.log(e[n]),t.appendChild(a(e[n]))}t.appendChild(u())}function a(e){const t=document.createElement("div");t.classList.add("project-task");const n=document.createElement("div");n.classList.add("project-task-left"),t.appendChild(n);const o=document.createElement("div");o.classList.add("checkbox"),n.appendChild(o);const c=document.createElement("p");return c.classList.add("project-task-desc"),c.textContent=e,n.appendChild(c),t.appendChild(function(){const e=document.createElement("div");e.classList.add("project-task-btn");const t=document.createElement("span");t.classList.add("material-icons-outlined"),t.classList.add("edit"),t.textContent="edit",e.appendChild(t);const n=document.createElement("span");return n.classList.add("material-icons-outlined"),n.classList.add("delete"),n.textContent="delete",e.appendChild(n),e}()),t}function u(){const e=document.createElement("button");e.classList.add("add-task");const t=document.createElement("span");return t.classList.add("material-icons-outlined"),t.classList.add("add-icon"),t.textContent="add",e.prepend(t,"Add Task"),e}function m(e){document.querySelector(".main-hd").textContent=e.title,document.querySelector(".main-hd-desc").textContent=e.desc,document.querySelector(".main-hd-date-user").textContent=e.dueDate;const t=document.querySelector(".main-hd-priority-user");var n;t.textContent=e.priority,t.style.color="Low"===(n=e.priority)?"green":"Medium"===n?"yellow":"red";const o=document.querySelector(".project-task-list");o.textContent="",o.appendChild(u())}document.querySelector(".add-project").addEventListener("click",(()=>{!function(){const t=document.querySelector(".project-form"),n=document.querySelector(".project-modal");n.showModal(),function(){const t=document.querySelector(".project-modal"),n=document.querySelector(".project-form");n.addEventListener("submit",(o=>{o.preventDefault();const c=document.getElementById("title"),d=document.getElementById("description"),l=document.getElementById("due-date");let s="Low";document.querySelector(".project-modal #medium").checked?s="Medium":document.querySelector(".project-modal #high").checked&&(s="High");const i=((e,t,n,o)=>({title:e,desc:t,dueDate:n,priority:o}))(c.value,d.value,l.value,s);e.push(i),r(e),m(i),t.close(),HTMLFormElement.prototype.reset.call(n)}),{once:!0})}(),document.querySelector(".project-close").addEventListener("click",(()=>{n.close(),HTMLFormElement.prototype.reset.call(t)}))}()})),document.querySelector(".project-list").addEventListener("click",(l=>{if("material-icons-outlined edit"===l.target.className)!function(t){const o=document.querySelector(".edit-form"),c=document.querySelector(".edit-modal");c.showModal(),function(t){const o=document.querySelector(".edit-modal"),c=document.querySelector(".edit-form");c.addEventListener("submit",(d=>{d.preventDefault();const l=document.getElementById("edit-title"),s=document.getElementById("edit-description"),i=document.getElementById("edit-due-date");let a="Low";document.querySelector(".edit-form #medium").checked?a="Medium":document.querySelector(".edit-form #high").checked&&(a="High");const u=n(t);e[u].title=l.value,e[u].desc=s.value,e[u].dueDate=i.value,e[u].priority=a,r(e),m(e[u]),o.close(),console.log(e),HTMLFormElement.prototype.reset.call(c)}),{once:!0})}(t),document.querySelector(".edit-close").addEventListener("click",(()=>{c.close(),HTMLFormElement.prototype.reset.call(o)}))}(l.target.parentElement.parentElement.childNodes[0].textContent);else if("material-icons-outlined delete"===l.target.className){const t=l.target.parentElement.parentElement.childNodes[0].textContent;(function(t){const o=n(t);e.splice(o,1),console.log(e),r(e),function(e){const t=document.querySelector(".main-hd-con"),n=document.querySelector(".main-hd"),o=document.querySelector(".main-hd-desc"),c=document.querySelector(".main-hd-date-user"),d=document.querySelector(".main-hd-priority-user");0===e.length?(n.textContent="",o.textContent="",c.textContent="",d.textContent="",t.style.paddingBottom="4.9rem"):(n.textContent=e[0].title,o.textContent=e[0].desc,c.textContent=e[0].dueDate,d.textContent=e[0].priority)}(e)})(t),function(e){const t=d(o,e);o.splice(t,1),i(o[t]),0!==o.length&&i(o[0].desc)}(t)}else if("project-title"===l.target.className){const e=l.target.className;l.target.parentElement.parentElement,t(e),c()}else{const e=l.target.childNodes[0].textContent;l.target.parentElement,t(e),c()}})),document.querySelector(".project-task-list").addEventListener("click",(e=>{if("add-task"===e.target.className)!function(){const e=document.querySelector(".task-form"),t=document.querySelector(".task-modal");t.showModal(),function(){const e=document.querySelector(".task-modal"),t=document.querySelector(".task-form");t.addEventListener("submit",(n=>{n.preventDefault();const c=document.querySelector(".main-hd"),l=document.getElementById("task-description");if(function(e){if(0===o.length)return!1;for(let t=0;t<o.length;t++)if(o[t].title===e)return!0;return!1}(c.textContent)){const e=d(o);o[e].desc.push(l.value)}else{const e=((e,t)=>({title:e,desc:t}))(c.textContent,[l.value]);o.push(e)}const r=d(o);i(o[r].desc),e.close(),HTMLFormElement.prototype.reset.call(t)}),{once:!0})}(),document.querySelector(".task-close").addEventListener("click",(()=>{t.close(),HTMLFormElement.prototype.reset.call(e)}))}();else if("material-icons-outlined edit"===e.target.className){const t=e.target.parentElement.parentElement.childNodes[0].textContent;!function(e,t){const n=document.querySelector(".edit-task-form"),c=document.querySelector(".edit-task-modal");c.showModal(),function(e,t){const n=document.querySelector(".edit-task-modal"),c=document.querySelector(".edit-task-form");c.addEventListener("submit",(r=>{r.preventDefault(),document.querySelector(".main-hd");const s=document.getElementById("edit-task-description"),a=d(o,e),u=l(o[a].desc,t);console.log(u),o[a].desc[u]=s.value,i(o[a].desc),n.close(),HTMLFormElement.prototype.reset.call(c)}),{once:!0})}(e,t),document.querySelector(".edit-task-close").addEventListener("click",(()=>{c.close(),HTMLFormElement.prototype.reset.call(n)}))}(document.querySelector(".main-hd").textContent,t)}else if("material-icons-outlined delete"===e.target.className){const t=e.target.parentElement.parentElement.childNodes[0].textContent;!function(e,t){const n=d(o,e),c=l(o[n].desc,t);o[n].desc.splice(c,1),i(o[n].desc)}(document.querySelector(".main-hd").textContent,t)}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,