(()=>{"use strict";let e=[];function t(t){const o=n(t);u(e[o])}function n(t){return e.findIndex((e=>e.title===t))}let o=[];function c(){const e=d(o);-1!=e&&s(o[e].desc)}function d(e,t){const n=document.querySelector(".main-hd");return void 0===t?e.findIndex((e=>e.title===n.textContent)):e.findIndex((e=>e.title===t))}function l(e){document.querySelector(".main-hd-con").style.paddingBottom="1rem";const t=document.querySelector(".project-list");t.textContent="";for(let n=0;n<e.length;n++)t.appendChild(r(e[n]))}function r(e){const t=document.createElement("div");t.classList.add("new-project-con");const n=document.createElement("p");return n.classList.add("project-title"),n.textContent=e.title,t.appendChild(n),t.appendChild(function(){const e=document.createElement("div");e.classList.add("project-btn");const t=document.createElement("span");t.classList.add("material-icons-outlined"),t.classList.add("edit"),t.textContent="edit",e.appendChild(t);const n=document.createElement("span");return n.classList.add("material-icons-outlined"),n.classList.add("delete"),n.textContent="delete",e.appendChild(n),e}()),t}function s(e){const t=document.querySelector(".project-task-list");if(void 0===e)t.textContent="";else{t.textContent="";for(let n=0;n<e.length;n++)console.log(e[n]),t.appendChild(i(e[n]))}t.appendChild(a())}function i(e){const t=document.createElement("div");t.classList.add("project-task");const n=document.createElement("div");n.classList.add("project-task-left"),t.appendChild(n);const o=document.createElement("div");o.classList.add("checkbox"),n.appendChild(o);const c=document.createElement("p");return c.classList.add("project-task-desc"),c.textContent=e,n.appendChild(c),t.appendChild(function(){const e=document.createElement("div");e.classList.add("project-task-btn");const t=document.createElement("span");t.classList.add("material-icons-outlined"),t.classList.add("edit"),t.textContent="edit",e.appendChild(t);const n=document.createElement("span");return n.classList.add("material-icons-outlined"),n.classList.add("delete"),n.textContent="delete",e.appendChild(n),e}()),t}function a(){const e=document.createElement("button");e.classList.add("add-task");const t=document.createElement("span");return t.classList.add("material-icons-outlined"),t.classList.add("add-icon"),t.textContent="add",e.prepend(t,"Add Task"),e}function u(e){document.querySelector(".main-hd").textContent=e.title,document.querySelector(".main-hd-desc").textContent=e.desc,document.querySelector(".main-hd-date-user").textContent=e.dueDate;const t=document.querySelector(".main-hd-priority-user");var n;t.textContent=e.priority,t.style.color="Low"===(n=e.priority)?"green":"Medium"===n?"yellow":"red";const o=document.querySelector(".project-task-list");o.textContent="",o.appendChild(a())}document.querySelector(".add-project").addEventListener("click",(()=>{!function(){const t=document.querySelector(".project-form"),n=document.querySelector(".project-modal");n.showModal(),function(){const t=document.querySelector(".project-modal"),n=document.querySelector(".project-form");n.addEventListener("submit",(o=>{o.preventDefault();const c=document.getElementById("title"),d=document.getElementById("description"),r=document.getElementById("due-date");let s="Low";document.querySelector(".project-modal #medium").checked?s="Medium":document.querySelector(".project-modal #high").checked&&(s="High");const i=((e,t,n,o)=>({title:e,desc:t,dueDate:n,priority:o}))(c.value,d.value,r.value,s);e.push(i),l(e),u(i),t.close(),HTMLFormElement.prototype.reset.call(n)}),{once:!0})}(),document.querySelector(".project-close").addEventListener("click",(()=>{n.close(),HTMLFormElement.prototype.reset.call(t)}))}()})),document.querySelector(".project-list").addEventListener("click",(r=>{if("material-icons-outlined edit"===r.target.className)!function(t){const o=document.querySelector(".edit-form"),c=document.querySelector(".edit-modal");c.showModal(),function(t){const o=document.querySelector(".edit-modal"),c=document.querySelector(".edit-form");c.addEventListener("submit",(d=>{d.preventDefault();const r=document.getElementById("edit-title"),s=document.getElementById("edit-description"),i=document.getElementById("edit-due-date");let a="Low";document.querySelector(".edit-form #medium").checked?a="Medium":document.querySelector(".edit-form #high").checked&&(a="High");const m=n(t);e[m].title=r.value,e[m].desc=s.value,e[m].dueDate=i.value,e[m].priority=a,l(e),u(e[m]),o.close(),console.log(e),HTMLFormElement.prototype.reset.call(c)}),{once:!0})}(t),document.querySelector(".edit-close").addEventListener("click",(()=>{c.close(),HTMLFormElement.prototype.reset.call(o)}))}(r.target.parentElement.parentElement.childNodes[0].textContent);else if("material-icons-outlined delete"===r.target.className){const t=r.target.parentElement.parentElement.childNodes[0].textContent;(function(t){const o=n(t);e.splice(o,1),console.log(e),l(e),function(e){const t=document.querySelector(".main-hd-con"),n=document.querySelector(".main-hd"),o=document.querySelector(".main-hd-desc"),c=document.querySelector(".main-hd-date-user"),d=document.querySelector(".main-hd-priority-user");0===e.length?(n.textContent="",o.textContent="",c.textContent="",d.textContent="",t.style.paddingBottom="4.9rem"):(n.textContent=e[0].title,o.textContent=e[0].desc,c.textContent=e[0].dueDate,d.textContent=e[0].priority)}(e)})(t),function(e){const t=d(o,e);o.splice(t,1),s(o[t]),0!==o.length&&s(o[0].desc)}(t)}else if("project-title"===r.target.className){const e=r.target.className;r.target.parentElement.parentElement,t(e),c()}else{const e=r.target.childNodes[0].textContent;r.target.parentElement,t(e),c()}})),document.querySelector(".project-task-list").addEventListener("click",(e=>{if("add-task"===e.target.className)!function(){const e=document.querySelector(".task-form"),t=document.querySelector(".task-modal");t.showModal(),function(){const e=document.querySelector(".task-modal"),t=document.querySelector(".task-form");t.addEventListener("submit",(n=>{n.preventDefault();const c=document.querySelector(".main-hd"),l=document.getElementById("task-description");if(function(e){if(0===o.length)return!1;for(let t=0;t<o.length;t++)if(o[t].title===e)return!0;return!1}(c.textContent)){const e=d(o);o[e].desc.push(l.value)}else{const e=((e,t)=>({title:e,desc:t}))(c.textContent,[l.value]);o.push(e)}const r=d(o);s(o[r].desc),e.close(),HTMLFormElement.prototype.reset.call(t)}),{once:!0})}(),document.querySelector(".task-close").addEventListener("click",(()=>{t.close(),HTMLFormElement.prototype.reset.call(e)}))}();else if("material-icons-outlined edit"===e.target.className){const t=e.target.parentElement.parentElement.childNodes[0].textContent;!function(e,t){const n=document.querySelector(".edit-task-form"),c=document.querySelector(".edit-task-modal");c.showModal(),function(e,t){const n=document.querySelector(".edit-task-modal"),c=document.querySelector(".edit-task-form");c.addEventListener("submit",(l=>{l.preventDefault(),document.querySelector(".main-hd");const r=document.getElementById("edit-task-description"),i=d(o,e),a=function(e,t){return document.querySelector(".main-hd"),e.findIndex((e=>e===t))}(o[i].desc,t);console.log(a),o[i].desc[a]=r.value,s(o[i].desc),n.close(),HTMLFormElement.prototype.reset.call(c)}),{once:!0})}(e,t),document.querySelector(".edit-task-close").addEventListener("click",(()=>{c.close(),HTMLFormElement.prototype.reset.call(n)}))}(document.querySelector(".main-hd").textContent,t)}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,