(()=>{"use strict";function e(e){const t=document.querySelector(".project-task-list"),o=document.querySelectorAll(".project-task");for(let e=0;e<o.length;e++)t.removeChild(document.querySelector(".project-task"));e.forEach((e=>{const o=document.createElement("div");o.classList.add("project-task");const c=document.createElement("div");c.classList.add("project-task-left");const d=document.createElement("div");d.classList.add("checkbox");const r=document.createElement("p");r.classList.add("project-task-desc"),r.textContent=e,c.appendChild(d),c.appendChild(r),o.appendChild(c),o.appendChild(n());const l=document.querySelector(".add-task");return t.insertBefore(o,l)}))}function t(e){!function(){const e=document.querySelector(".project-task-list"),t=document.querySelectorAll(".project-task");for(let n=0;n<t.length;n++)e.removeChild(document.querySelector(".project-task"))}(),document.querySelector(".main-hd").textContent=e.title,document.querySelector(".main-hd-desc").textContent=e.description,document.querySelector(".main-hd-date-user").textContent=e.dueDate;const t=document.querySelector(".main-hd-priority-user");t.textContent=e.priority,t.style.color=function(e){return"Low"===e?"green":"Medium"===e?"yellow":"red"}(e.priority)}function n(){const e=document.createElement("div");e.classList.add("project-btn");const t=document.createElement("span"),n=document.createElement("span");return t.classList.add("material-icons-outlined"),t.classList.add("edit"),n.classList.add("material-icons-outlined"),n.classList.add("delete"),t.textContent="edit",n.textContent="delete",e.appendChild(t),e.appendChild(n),e}let o=[];let c=[];document.querySelector(".add-project").addEventListener("click",(()=>{!function(){const e=document.querySelector(".project-modal");e.showModal(),document.querySelector(".project-close").addEventListener("click",(()=>{e.close()}))}()})),function(){const e=document.querySelector(".project-form"),c=document.querySelector(".project-modal");e.addEventListener("submit",(d=>{d.preventDefault();const r=document.getElementById("title"),l=document.getElementById("description"),s=document.getElementById("due-date");let i="Low";document.getElementById("medium").checked?i="Medium":document.getElementById("high").checked&&(i="High");const u=((e,t,n,o)=>({title:e,description:t,dueDate:n,priority:o}))(r.value,l.value,s.value,i);return o.push(u),function(e){const t=document.querySelector(".project-list");t.textContent="",e.forEach((e=>{const o=document.createElement("div");o.classList.add("new-project-con");const c=document.createElement("p");c.classList.add("project-title"),c.textContent=e.title,o.appendChild(c),o.appendChild(n()),t.appendChild(o)}))}(o),t(u),c.close(),e.reset(),o}))}(),function(){const t=document.querySelector(".task-form"),n=document.querySelector(".task-modal"),o=document.querySelector(".main-hd");t.addEventListener("submit",(d=>{d.preventDefault();const r=document.getElementById("task-description");if(function(e){if(0===c.length)return!1;for(let t=0;t<c.length;t++)if(c[t].project===e)return!0}(o.textContent)){const t=c.findIndex((e=>e.project===o.textContent));c[t].description.push(r.value),e(c[t].description)}else{const t=((e,t)=>({project:e,description:t}))(o.textContent,[r.value]);c.push(t);const n=c.findIndex((e=>e.project===o.textContent));e(c[n].description)}return n.close(),t.reset(),c}))}(),document.querySelectorAll(".project-list").forEach((n=>{n.addEventListener("click",(n=>{const d=n.target.childNodes[0].childNodes[0].textContent,r=o.findIndex((e=>e.title===d));t(o[r]);const l=c.findIndex((e=>e.project===d));-1!==l&&e(c[l].description)}))})),document.querySelector(".add-task").addEventListener("click",(()=>{!function(){const e=document.querySelector(".task-modal");e.showModal(),document.querySelector(".task-close").addEventListener("click",(t=>{e.close()}))}()})),document.querySelector(".completed-tab").addEventListener("click",(e=>{const t=e.target.innerText;var n;n=t,document.querySelector(".completed-tab .material-icons-outlined").innerText="Completed\nexpand_more"===n||"expand_more"===n?"expand_less":"expand_more",function(e){const t=document.querySelector(".completed-list");"Completed\nexpand_more"===e||"expand_more"===e?(document.querySelectorAll(".user-project").forEach((e=>{e.addEventListener("mouseover",(()=>{e.setAttribute("style","background-color: rgba(255, 255, 255, 0.296); border-radius: 5px;")})),e.addEventListener("mouseout",(()=>{e.style.background="none"}))})),t.classList.remove("hidden")):t.classList.add("hidden")}(t)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,